"use strict";(self.webpackChunksearch_party_lab=self.webpackChunksearch_party_lab||[]).push([[9679],{762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(4848),o=t(8453),s=t(1470),a=t(9365);const i={},l="\ud83e\uddb8\u200d\u2642\ufe0f Testing the Hybrid Search",c={id:"hybrid-search/testing-hybrid-search",title:"\ud83e\uddb8\u200d\u2642\ufe0f Testing the Hybrid Search",description:"Extra activity, do it if you have extra time or are following at home, won't be covered during the hands-on Lab.",source:"@site/docs/8-hybrid-search/3-testing-hybrid-search.mdx",sourceDirName:"8-hybrid-search",slug:"/hybrid-search/testing-hybrid-search",permalink:"/search-lab/zh/docs/hybrid-search/testing-hybrid-search",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/search-lab/blob/main/docs/8-hybrid-search/3-testing-hybrid-search.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83e\uddb8\u200d\u2642\ufe0f Implementing Hybrid Search",permalink:"/search-lab/zh/docs/hybrid-search/implementing-hybrid-search"},next:{title:"\ud83c\udfaf \u603b\u7ed3",permalink:"/search-lab/zh/docs/summary"}},u={},d=[];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\ufe0f-testing-the-hybrid-search",children:"\ud83e\uddb8\u200d\u2642\ufe0f Testing the Hybrid Search"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Extra activity, do it if you have extra time or are following at home, won't be covered during the hands-on Lab."})}),"\n",(0,r.jsx)(n.p,{children:"Here's the complete code snippet to implement a hybrid search against the books collection."}),"\n",(0,r.jsxs)(s.A,{groupId:"server",children:[(0,r.jsx)(a.A,{value:"node",label:"\ud83d\ude80 NodeJS/Express",children:(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"See complete code"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'    //...\n    private computeWeightedRRF(books: Book[], weight: number): void{\n        const RANK_CONSTANT = 60;\n        books.forEach((book,i)=>{\n            book[\'score\'] = weight*1/(i+RANK_CONSTANT)\n            return book;\n        })\n    }\n\n    public async fullTextSearch(query: string,limit: number): Promise<Book[]>{\n        const pipeline = [\n            {\n              $search: {\n                index: "fulltextsearch",\n                compound: {\n                  should: [\n                    {\n                      text: {\n                        query,\n                        path: "title",\n                        score: { boost: { value: 3 } }\n                      }\n                    },\n                    {\n                        text: {\n                          query,\n                          path: "synopsis",\n                          score: { boost: { value: 2 } }\n                        }\n                    },\n                    {\n                      text: {\n                        query,\n                        path: "authors.name",\n                        score: { boost: { value: 2 } }\n                      }\n                    }\n                  ]\n                }\n              }\n            },{\n              $limit: limit\n            },{\n              $project:{ //project only relevant fields\n                title: 1, authors: 1, synopsis:1, cover:1\n              }\n            }\n          ]\n        const books = await collections?.books?.aggregate(pipeline).toArray() as Book[];\n        return books;\n    }\n\n    public async vectorSearch(query: string, limit: number): Promise<Book[]>{\n        const vector = await getEmbeddings(query);\n        const pipeline = [\n            {\n                $vectorSearch: {\n                  queryVector:  vector,\n                  path: \'embeddings\',\n                  numCandidates: 100,\n                  index: \'vectorsearch\',\n                  limit: limit,\n                }\n            },{\n                $project:{ //project only relevant fields\n                  title: 1, authors: 1, synopsis:1, cover:1\n                }\n            }\n          ]\n        const books = await collections?.books?.aggregate(pipeline).toArray() as Book[];\n        return books;\n    }\n\n    public async searchBooks(query: string): Promise<Book[]> {\n        const VECTOR_WEIGHT = 0.6;\n        const FULL_TEXT_WEIGHT = 0.4;\n        const SEARCH_LIMIT = 6\n\n        //run full text search and vector search separately\n        const [fts_results,vs_results] = await Promise.all([\n            this.fullTextSearch(query, SEARCH_LIMIT),\n            this.vectorSearch(query, SEARCH_LIMIT)\n        ])\n\n        //compute weighted Reciprocal Rank Fusion on both results\n        this.computeWeightedRRF(fts_results, FULL_TEXT_WEIGHT)\n        this.computeWeightedRRF(vs_results, VECTOR_WEIGHT)\n\n        //aggregate both arrays to a single map using _id as a key\n        const documentMap = [...fts_results,...vs_results].reduce((map,book:any)=>{\n            if(map.hasOwnProperty(book._id)){\n                map[book._id].score += book.score;\n            }else{\n                map[book._id] = book;\n            }\n            return map;\n        },{})\n\n        //transform map back to an array\n        const books = Object.keys(documentMap).map(k=>documentMap[k]);\n\n        //return books with the highest scores\n        const topBooks = books.sort((a,b)=>b.score-a.score).slice(0,SEARCH_LIMIT);\n        return topBooks;\n      }\n    //...\n'})})})]})}),(0,r.jsx)(a.A,{value:"java",label:"\u2615\ufe0f Java Spring Boot",children:(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"See complete code"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"title='src/main/java/com/mongodb/devrel/library/domain/service/BookService.java'",children:'private List<BookWithScore> computeWeightedRRF(List<Book> books, double weight) {\n    final int RANK_CONSTANT = 60;\n    List<BookWithScore> scoredBooks = new ArrayList<>();\n\n    for (int i = 0; i < books.size(); i++) {\n        Book book = books.get(i);\n        double score = weight * (1.0 / (i + RANK_CONSTANT));\n        scoredBooks.add(new BookWithScore(book, score));\n    }\n\n    return scoredBooks;\n}\n\npublic List<Book> fullTextSearch(String query, int limit) {\n    AggregationOperation searchStage = context -> new Document("$search",\n            new Document("index", "fulltextsearch")\n                    .append("compound",\n                            new Document("should", Arrays.asList(\n                                    new Document("text",\n                                            new Document("query", query)\n                                                    .append("path", "title")\n                                                    .append("score", new Document("boost", new Document("value", 3L)))),\n                                    new Document("text",\n                                            new Document("query", query)\n                                                    .append("path", "synopsis")\n                                                    .append("score", new Document("boost", new Document("value", 2L)))),\n                                    new Document("text",\n                                            new Document("query", query)\n                                                    .append("path", "authors.name")\n                                                    .append("score", new Document("boost", new Document("value", 2L))))\n                            ))\n                    )\n    );\n    AggregationOperation limitStage = context -> new Document("$limit", limit);\n    AggregationOperation projectStage = context -> new Document("$project",\n            new Document("title", 1L)\n                    .append("authors", 1L)\n                    .append("synopsis", 1L)\n                    .append("cover", 1L)\n    );\n    Aggregation aggregation = Aggregation.newAggregation(searchStage, limitStage, projectStage);\n    return mongoTemplate.aggregate(aggregation, "books", Book.class).getMappedResults();\n}\n\npublic List<Book> vectorSearch(String query, int limit) {\n    List<Double> vector = embeddingProvider.getEmbeddings(query);\n\n    AggregationOperation searchStage = context ->\n            new Document("$vectorSearch",\n                    new Document("index", "vectorsearch")\n                            .append("path", "embeddings")\n                            .append("queryVector", vector)\n                            .append("numCandidates", 100)\n                            .append("limit", limit)\n            );\n\n    AggregationOperation projectStage = context ->\n            new Document("$project",\n                    new Document("title", 1L)\n                            .append("authors", 1L)\n                            .append("synopsis", 1L)\n                            .append("cover", 1L)\n            );\n\n    Aggregation aggregation = Aggregation.newAggregation(searchStage, projectStage);\n\n    return mongoTemplate.aggregate(aggregation, "books", Book.class).getMappedResults();\n}\n\npublic List<Book> searchBooks(String theTerm) {\n    final double VECTOR_WEIGHT = 0.6;\n    final double FULL_TEXT_WEIGHT = 0.4;\n    final int SEARCH_LIMIT = 6;\n\n    List<Book> ftsResults = fullTextSearch(theTerm, SEARCH_LIMIT);\n    List<Book> vsResults = vectorSearch(theTerm, SEARCH_LIMIT);\n\n    List<BookWithScore> scoredFts = computeWeightedRRF(ftsResults, FULL_TEXT_WEIGHT);\n    List<BookWithScore> scoredVs = computeWeightedRRF(vsResults, VECTOR_WEIGHT);\n\n    Map<String, Double> scoreMap = new HashMap<>();\n    Map<String, Book> bookMap = new HashMap<>();\n\n    Stream.concat(scoredFts.stream(), scoredVs.stream())\n            .forEach(bws -> {\n                String id = bws.book().id();\n                bookMap.putIfAbsent(id, bws.book());\n                scoreMap.merge(id, bws.score(), Double::sum);\n            });\n\n    return scoreMap.entrySet().stream()\n            .sorted(Map.Entry.<String, Double>comparingByValue().reversed())\n            .limit(SEARCH_LIMIT)\n            .map(entry -> bookMap.get(entry.getKey()))\n            .toList();\n}\n'})})})]})})]}),"\n",(0,r.jsxs)(n.p,{children:["You can observe the effect of hybrid search on the search results by tuning the ",(0,r.jsx)(n.strong,{children:"VECTOR_WEIGHT"})," and ",(0,r.jsx)(n.strong,{children:"FULL_TEXT_WEIGHT"}),".\nLets use the search term ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"basketball"})})," and compare the results. Note that your results may look different as we may periodically make changes to the dataset."]}),"\n",(0,r.jsxs)(n.p,{children:["Lets start with setting ",(0,r.jsx)(n.code,{children:"VECTOR_WEIGHT=0"})," and ",(0,r.jsx)(n.code,{children:"FULL_TEXT_WEIGHT=1"})," i.e. the results will be based on 100% full-text search."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Here are the top 6 titles:"}),(0,r.jsx)("div",{children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The New York Knicks Basketball Team (Great Sports Teams)"}),"\n",(0,r.jsx)(n.li,{children:"In the Land of Giants: My Life in Basketball"}),"\n",(0,r.jsx)(n.li,{children:"Venus to the Hoop: A Gold Medal Year in Women's Basketball"}),"\n",(0,r.jsx)(n.li,{children:"Night Hoops"}),"\n",(0,r.jsx)(n.li,{children:"Cat (Fear Street Series #45)"}),"\n",(0,r.jsx)(n.li,{children:"NBA: The Official Fan's Guide"}),"\n"]})})]}),"\n",(0,r.jsxs)(n.p,{children:["Now, lets set ",(0,r.jsx)(n.code,{children:"VECTOR_WEIGHT=1"})," and ",(0,r.jsx)(n.code,{children:"FULL_TEXT_WEIGHT=0"})," i.e. the results will be based on 100% vector search."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Here are the top 6 titles:"}),(0,r.jsx)("div",{children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"NBA: The Official Fan's Guide"}),"\n",(0,r.jsx)(n.li,{children:"In the Land of Giants: My Life in Basketball"}),"\n",(0,r.jsx)(n.li,{children:"Night Hoops"}),"\n",(0,r.jsx)(n.li,{children:"Venus to the Hoop: A Gold Medal Year in Women's Basketball"}),"\n",(0,r.jsx)(n.li,{children:"The New York Knicks Basketball Team (Great Sports Teams)"}),"\n",(0,r.jsx)(n.li,{children:"The Big Three"}),"\n"]})})]}),"\n",(0,r.jsxs)(n.p,{children:["Finally, lets set ",(0,r.jsx)(n.code,{children:"VECTOR_WEIGHT=0.6"})," and ",(0,r.jsx)(n.code,{children:"FULL_TEXT_WEIGHT=0.4"})," i.e. we are placing equal empahasis on full-text search and vector search."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Here are the top 6 titles:"}),(0,r.jsx)("div",{children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"In the Land of Giants: My Life in Basketball"}),"\n",(0,r.jsx)(n.li,{children:"NBA: The Official Fan's Guide"}),"\n",(0,r.jsx)(n.li,{children:"The New York Knicks Basketball Team (Great Sports Teams)"}),"\n",(0,r.jsx)(n.li,{children:"Night Hoops"}),"\n",(0,r.jsx)(n.li,{children:"Venus to the Hoop: A Gold Medal Year in Women's"}),"\n",(0,r.jsx)(n.li,{children:"The Big Three"}),"\n"]})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key observations:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["From the full-text search result, ",(0,r.jsx)(n.strong,{children:"Cat (Fear Street Series #45)"})," can be seen as a false positive because it may have little to do with basketball but it is only there because the synopsis contains the word ",(0,r.jsx)(n.strong,{children:"basketball"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["From the vector search result, ",(0,r.jsx)(n.strong,{children:"The Big Three"})," made it to the top 6 because it showed a few basketball players on its cover image, but this title was missed in the full-text search because neither the title nor the synopsis contains the word ",(0,r.jsx)(n.strong,{children:"basketball"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"From the hybrid search result, titles that made it to both types of search were ranked higher"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var r=t(8215);const o={tabItem:"tabItem_Ymn6"};var s=t(4848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(6540),o=t(8215),s=t(3104),a=t(6347),i=t(205),l=t(7485),c=t(1682),u=t(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=h(e),[a,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=m({queryString:t,groupId:o}),[b,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,u.Dv)(t);return[o,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:o}),x=(()=>{const e=c??b;return p({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{x&&l(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=t(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function y(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),o=i[t].value;o!==r&&(c(n),a(o))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...s,className:(0,o.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function k(e){const n=b(e);return(0,f.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(v,{...n,...e})]})}function j(e){const n=(0,g.A)();return(0,f.jsx)(k,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);