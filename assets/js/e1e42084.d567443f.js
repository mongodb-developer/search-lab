"use strict";(self.webpackChunksearch_party_lab=self.webpackChunksearch_party_lab||[]).push([[5560],{8721:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var r=i(5893),t=i(1151);const s={},a="\ud83e\uddb8\u200d\u2642\ufe0f Hybrid Search Exercise",o={id:"hybrid-search/exercise",title:"\ud83e\uddb8\u200d\u2642\ufe0f Hybrid Search Exercise",description:"Extra activity, do it if you have extra time or are following at home, won't be covered during the hands-on Lab.",source:"@site/docs/8-hybrid-search/4-exercise.mdx",sourceDirName:"8-hybrid-search",slug:"/hybrid-search/exercise",permalink:"/search-lab/docs/hybrid-search/exercise",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/search-lab/blob/main/docs/8-hybrid-search/4-exercise.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd8 Complete Code example",permalink:"/search-lab/docs/hybrid-search/complete-example"},next:{title:"\ud83c\udfaf Summary",permalink:"/search-lab/docs/summary"}},c={},h=[{value:"Creating a Basic Hybrid Search Pipeline",id:"creating-a-basic-hybrid-search-pipeline",level:2},{value:"Experimenting with Score Weighting",id:"experimenting-with-score-weighting",level:2},{value:"Adding Pre-filtering",id:"adding-pre-filtering",level:2},{value:"Exercise Tasks",id:"exercise-tasks",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\ufe0f-hybrid-search-exercise",children:"\ud83e\uddb8\u200d\u2642\ufe0f Hybrid Search Exercise"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Extra activity, do it if you have extra time or are following at home, won't be covered during the hands-on Lab."})}),"\n",(0,r.jsx)(n.p,{children:"One of the powerful features of MongoDB Atlas is the ability to combine vector search with traditional text search, creating a hybrid search solution. This allows us to leverage both semantic understanding and keyword matching for more comprehensive search results. In this exercise, we'll implement a hybrid search pipeline and then experiment with different weightings."}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-basic-hybrid-search-pipeline",children:"Creating a Basic Hybrid Search Pipeline"}),"\n",(0,r.jsx)(n.p,{children:"Let's start by creating a basic hybrid search pipeline that combines vector search on book synopses with text search on titles and author names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'[\n  {\n    $vectorSearch: {\n      queryVector: vector, // Assume this is already defined\n      path: "embeddings",\n      numCandidates: 100,\n      index: "books_synopsis_vector",\n      limit: 20\n    }\n  },\n  {\n    $search: {\n      index: "books_text_index",\n      compound: {\n        should: [\n          {\n            text: {\n              query: searchQuery, // Assume this is already defined\n              path: "title",\n              score: { boost: { value: 3 } }\n            }\n          },\n          {\n            text: {\n              query: searchQuery,\n              path: "authors.name",\n              score: { boost: { value: 2 } }\n            }\n          }\n        ]\n      }\n    }\n  },\n  {\n    $addFields: {\n      vector_score: { $meta: "vectorSearchScore" },\n      text_score: { $meta: "searchScore" }\n    }\n  },\n  {\n    $addFields: {\n      combined_score: {\n        $add: [\n          { $multiply: ["$vector_score", 0.5] },\n          { $multiply: ["$text_score", 0.5] }\n        ]\n      }\n    }\n  },\n  { $sort: { combined_score: -1 } },\n  { $limit: 10 }\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Add this aggregation pipeline to your code in ",(0,r.jsx)(n.code,{children:"server/src/controllers/books.ts"})," inside the ",(0,r.jsx)(n.code,{children:"searchBooks"})," method."]}),"\n",(0,r.jsx)(n.h2,{id:"experimenting-with-score-weighting",children:"Experimenting with Score Weighting"}),"\n",(0,r.jsx)(n.p,{children:"Now that we have a basic hybrid search implemented, let's experiment with different weightings for the vector and text scores."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Try adjusting the weights in the ",(0,r.jsx)(n.code,{children:"combined_score"})," calculation. For example:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'combined_score: {\n  $add: [\n    { $multiply: ["$vector_score", 0.7] },\n    { $multiply: ["$text_score", 0.3] }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This gives more weight to the vector search results."}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Test the search with different queries and observe how the results change with different weightings."}),"\n",(0,r.jsxs)(n.li,{children:["Experiment with the ",(0,r.jsx)(n.code,{children:"boost"})," values in the text search stage. Try increasing the boost for the title or author name and see how it affects the results."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"adding-pre-filtering",children:"Adding Pre-filtering"}),"\n",(0,r.jsx)(n.p,{children:"To further refine our hybrid search, let's add pre-filtering capabilities. We'll filter books by their publication year before performing the vector search."}),"\n",(0,r.jsx)(n.p,{children:"Modify your vector search stage to include a filter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'\n{\n  $vectorSearch: {\n    queryVector: vector,\n    path: "embeddings",\n    numCandidates: 100,\n    index: "books_synopsis_vector",\n    limit: 20,\n    filter: { year: { $gte: 2000 } } // Only books published from 2000 onwards\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Remember to update your vector index to support filtering on the ",(0,r.jsx)(n.code,{children:"year"})," field, similar to what you did in the pre-filtering exercise:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "fields": [\n    {\n      "type": "vector",\n      "path": "embeddings",\n      "numDimensions": 1536,\n      "similarity": "cosine"\n    },\n    {\n      "type": "filter",\n      "path": "year"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"exercise-tasks",children:"Exercise Tasks"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Implement the basic hybrid search pipeline in your application."}),"\n",(0,r.jsx)(n.li,{children:"Experiment with at least three different weight combinations for vector and text scores. Document how the results change."}),"\n",(0,r.jsx)(n.li,{children:"Add pre-filtering to your hybrid search to only include books published in the last 20 years."}),"\n",(0,r.jsx)(n.li,{children:"Create a function that allows users to specify the importance of title matches vs. content similarity, and adjust the weights accordingly."}),"\n",(0,r.jsx)(n.li,{children:"Test your hybrid search with various queries and compare the results to those from pure vector search and pure text search."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Completing this exercise, you'll gain hands-on experience in implementing and fine-tuning a hybrid search solution, combining the strengths of both vector and text search capabilities in MongoDB Atlas."})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var r=i(7294);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);